---
title: 'Feedback Control Systems'
date: ''
bibliography: cloud-computing.bib
csl: ieee
format: 
  baylor_theme-revealjs:
    author: 'Nathen Byford'
    footer: 'Nathen Byford M.S.'
    toc: true
    toc-depth: 1
    mermaid:
      theme: forest
---

# Introduction

## What are Control Systems

::: {.columns}
::: {.column width="65%"}
Control system components

1. Sensors,
2. Monitors, and
3. Actuators

Control systems monitor large systems that cannot be monitored individually.

:::

::: {.column width="35%"}
```{mermaid}
graph TD
    A[Sensors] -->|Measured values| B[Monitor]
    B -->|Request| C[Actuators]
    C -->|Monitoring| A

```

:::
:::


:::{.notes}
The sensors measure the parameter (or parameters) of interest before transmitting the measured values to the monitor. The monitor will then decide if it is necessary for the system behaviors to change. If the behaviors do need to change then the request is given to the actuators to carry out on the system.

For example: a parameter used for admin. control policy is the current system load, once some threshold is met, the cloud stops accepting additional load.
:::

## Control Systems in the Cloud

- Since the early days of the cloud computing the CSP have provided coarse-grain control over the VMs to customers.
    - Limited to adding another VM or removing VM with pre-specified sizes.
- Meanwhile the CSP is able to control load on their servers with full access to CPU, memory, disk usage, and etc.

![](vertical-scaling.png){fig-align="center"}

## Challenges

- Implementation of such policies can be challenging,
- System load is changing rapidly, and
- SLA requirements need to be considered by CSPs.

For customers who would like to run their own control monitors on their VMs there is a different set of challenges.

- What information about the system is shared with the customer, 
- APIs may only provide coarse granularity of control over system, and
- Coarse granularity can lead to oscillation around a target parameter.

# Proportional Thresholding
<p style="font-size: 0.7em;">Automated control in cloud computing: challenges and opportunities @lim_automated_2009</p>

## Proportional Thresholding Goals

Early cloud systems exposed basic APIs to add or remove virtual machines (VMs).

- This enabled customer managed scaling.
- With the basic API only coarse-grained control options were available.

The paper seeks to answer the following questions

- With the constraints places on the user cloud utility service API, can an external controller function effectively?
- How can control policies be designed or adapted to handle the coarse-grained actuators typical of "current" cloud platforms?

## Proportional Thresholding Overview

- Proportional thresholding is an enhanced feedback control policy based on a standard integral (feedback) controller.
- Designed to manage resources in environments with coarse-grained control mechanisms (e.g., scaling virtual machines).
- Dynamically adjusts a target utilization range rather than maintaining a fixed target values.
    - Widens at smaller scales and narrows at large scales.

## How It Works

An integral controller is as follows,
$$
  u_{t + 1} = u_t + K_i \times (y_{ref} - y_t)
$$
where:

- $u_{t+1}$ is the new actuator value,
- $u_t$ is the current actuator value,
- $K_i$ is a tuning parameter, 
- $y_{ref}$ is the target sensor measure, and
- $y_k$ is the current sensor measure.


## Vision and Takeaways

- The paper proposed the idea of decouples control systems:
    - *Slice controllers* (users) and *Cloud controllers* (CSPs)
- The paper also advocates for richer APIs to allow the slice controllers to be more effective.

Limitations:

- Lack of real-time adaptability, and
- Potential Large jumps in coarse-grain actuator (VM sizing).

# Current Cloud Offereings

## Cloud Autoscalers

- Starting in the early 2010s many CSPs began to offer integrated autoscalers.
    - AWS Auto-scaling @barr_new_2017,
    - Microsoft Azure Auto-scale @agrawal_autonomic_2021, and
    - Google Cloud Autoscaling @noauthor_load_nodate.
- Introduced with target-based scaling using feedback control.

## Early Autoscalers

The process for the early autoscalers where two step:

1. Customer specifies a desired metric and level (e.g. 70% CPU utilization)
2. The auto-scaler will automatically scale up or down as needed to stay near specified level.

:::{.callout-note .bottom-callout}
Closely resembled what was purposed by Lim et al. (2009) without the user needing to implement the feedback controller on their own.
:::

## Autoscaler Innovations

Innovations in auto-scaling include:

- Scheduled scaling,
- Integration with containers and PaaS, and
- Predictive Scaling (ML-based).

# Predictive Scaling

## Predictive Scaling

- Rule-based scalers are reactive in nature,
    - This leads to added latency in resource readiness.
- Predictive scaling can capture the cyclical trends of usage using Statistical methods.
    - Forecast future demand and acquire needed resources in preparation of demand,
    - Time series models, or
    - Machine learning methods.

## Current Implementations

- AWS Predictive Scaling and Azure Predictive Auto-scale
    - Allow the use of ML models to predict traffic and pre-provision resources, and
    - Reduces latency of VM boot and warm up.
- More recent work has further developed the use of ML and Reinforcement learning (RL) to automate the process further.

## Self-Optimization

- Microsoft Azure Predictive Auto-scale introduced a hybrid approach @agrawal_autonomic_2021
    - Uses ML predictive scaling to scale out, and
    - feedback/reactive scaling to scale further.
- Alibaba's Ant Group (Alipay) developed a meta-RL approach @xue_meta_2022 that incorporates,
    - A workload prediction model and
    - A neural network to make scaling decisions.

## User-level Benefits

- Simplified interfaces,
- Cost savings,
- Reduced Management Burden, and
- Finer control of scaling systems.

# Closing Thoughts

## Unsolved Challenges

Potential future areas of improvement are:

- Multi-tier and multi-metric scaling,
- Improving interpretability of ML-driven scaling decisions, and
- Other areas of optimization like energy efficiency.

## Conclusion

- Cloud control systems have shifted from user-managed feedback loops to provider-integrated auto-scaling systems.
- As methods of system control have changed the goal remains the same: Serve users objectives to control systems and keep cost low.
- Currently there is no shortage of user controlled cloud control systems that are feature packed.

# Thank you

## References
